
Based on the graphql schema below, the example record, and the additional context of the system, write a graphql query that would retrieve the data nessesary to answer the user's question:

GraphQL Schema:
```graphql
schema {
  query: WeaviateObj
}

"""String or String[]"""
scalar TextStringGetObjectsActivites

"""Float or Float[]"""
scalar FloatGetObjectsActivites

"""Int or Int[]"""
scalar IntGetObjectsActivites

type ActivitesAdditional {
  certainty: Float
  creationTimeUnix: String
  distance: Float
  explainScore: String

  """The UUID of a Object, assigned by its local Weaviate"""
  id: String
  lastUpdateTimeUnix: String
  score: String
  vector: [Float]
}

"""Location of the root query"""
type WeaviateObj {
  """Get Objects on a local Weaviate"""
  Get: GetObjectsObj
}

"""String or String[]"""
scalar TextDateGetObjectsActivites

type Activites {
  """Record ID, used for bookkeeping."""
  _ab_record_id: String
  _ab_stream: String
  _additional: ActivitesAdditional
  achievement_count: Float
  athlete: String
  athlete_count: Float
  average_cadence: Float
  average_heartrate: Float
  average_speed: Float
  average_temp: Float
  average_watts: Float
  comment_count: Float
  commute: Boolean
  device_watts: Boolean
  display_hide_heartrate_option: Boolean
  distance: Float
  elapsed_time: Float
  elev_high: Float
  elev_low: Float
  end_latlng: String
  external_id: String
  flagged: Boolean
  from_accepted_tag: Boolean
  gear_id: String
  has_heartrate: Boolean
  has_kudoed: Boolean
  heartrate_opt_out: Boolean
  kilojoules: Float
  kudos_count: Float
  manual: Boolean
  map: String
  max_heartrate: Float
  max_speed: Float
  max_watts: Float
  moving_time: Float
  name: String
  photo_count: Float
  pr_count: Float
  private: Boolean
  raw_id: Float
  resource_state: Float
  sport_type: String
  start_date: String
  start_date_local: String
  start_latlng: String
  suffer_score: Float
  text: String
  timezone: String
  total_elevation_gain: Float
  total_photo_count: Float
  trainer: Boolean
  type: String
  upload_id: Float
  upload_id_str: String
  utc_offset: Float
  visibility: String
  weighted_average_watts: Float
  workout_type: String
}


"""
An object containing the Operands that can be applied to a 'where' filter
"""
input GetObjectsActivitesWhereOperandsInpObj {
  """
  Specify the path from the Objects fields to the property name (e.g. ['Things', 'City', 'population'] leads to the 'population' property of a 'City' object)
  """
  path: [String]

  """Specify a String value that the target property will be compared to"""
  valueString: TextStringGetObjectsActivites

  """Specify a Text value that the target property will be compared to"""
  valueText: TextGetObjectsActivites

  """Specify a String value that the target property will be compared to"""
  valueDate: TextDateGetObjectsActivites

  """Contains the Operands that can be applied to a 'where' filter"""
  operands: [GetObjectsActivitesWhereOperandsInpObj]

  """Contains the Operators that can be applied to a 'where' filter"""
  operator: GetObjectsActivitesWhereOperatorEnum

  """Specify a Boolean value that the target property will be compared to"""
  valueBoolean: BooleanGetObjectsActivites

  """Specify a Float value that the target property will be compared to"""
  valueNumber: FloatGetObjectsActivites

  """Specify an Integer value that the target property will be compared to"""
  valueInt: IntGetObjectsActivites
}

"""Boolean or Boolean[]"""
scalar BooleanGetObjectsActivites

"""String or String[]"""
scalar TextGetObjectsActivites

"""
An object containing the Operators that can be applied to a 'where' filter
"""
enum GetObjectsActivitesWhereOperatorEnum {
  """"""
  And

  """"""
  Like

  """"""
  LessThan

  """"""
  Equal

  """"""
  Not

  """"""
  NotEqual

  """"""
  Or

  """"""
  GreaterThanEqual

  """"""
  IsNull

  """"""
  ContainsAny

  """"""
  ContainsAll

  """"""
  GreaterThan

  """"""
  LessThanEqual

  """"""
  WithinGeoRange
}

"""
An object containing filter options for a local Get query, used to convert the result to the specified filters
"""
input GetObjectsActivitesWhereInpObj {
  """Specify a Text value that the target property will be compared to"""
  valueText: TextGetObjectsActivites

  """Specify a String value that the target property will be compared to"""
  valueDate: TextDateGetObjectsActivites

  """Contains the Operands that can be applied to a 'where' filter"""
  operands: [GetObjectsActivitesWhereOperandsInpObj]

  """Specify a Boolean value that the target property will be compared to"""
  valueBoolean: BooleanGetObjectsActivites

  """Specify a String value that the target property will be compared to"""
  valueString: TextStringGetObjectsActivites

  """
  Specify the path from the Objects fields to the property name (e.g. ['Things', 'City', 'population'] leads to the 'population' property of a 'City' object)
  """
  path: [String]

  """Specify an Integer value that the target property will be compared to"""
  valueInt: IntGetObjectsActivites

  """Specify a Float value that the target property will be compared to"""
  valueNumber: FloatGetObjectsActivites

  """Contains the Operators that can be applied to a 'where' filter"""
  operator: GetObjectsActivitesWhereOperatorEnum
}

"""An object used to get %ss on a local Weaviate"""
type GetObjectsObj {
  Activites(
    """Limit the results set (usually fewer results mean faster queries)"""
    limit: Int

    """Show the results after the first x results (pagination option)"""
    offset: Int

    """
    Cut off number of results after the Nth extrema. Off by default, negative numbers mean off.
    """
    autocut: Int

    """
    Filter options for a local Get query, used to convert the result to the specified filters
    """
    where: GetObjectsActivitesWhereInpObj

    """Show the results after a given ID"""
    after: String
  ): [Activites]
}

Example Related Records:
```json
{
  "Get": {
    "Activites": [
      {
        "achievement_count": 70,
        "athlete": "{\"id\": 54428340, \"resource_state\": 1}",
        "athlete_count": 1,
        "average_cadence": null,
        "average_heartrate": 133.3,
        "average_speed": 7.862,
        "average_temp": null,
        "average_watts": null,
        "comment_count": 0,
        "commute": false,
        "device_watts": null,
        "display_hide_heartrate_option": true,
        "distance": 40947.7,
        "elapsed_time": 5242,
        "elev_high": 86.1,
        "elev_low": 6.4,
        "end_latlng": "[49.271961, -123.18351]",
        "external_id": "773D87CB-CB13-4686-B9CB-7792BA0B2CC9",
        "flagged": false,
        "from_accepted_tag": false,
        "gear_id": "null",
        "has_heartrate": true,
        "has_kudoed": false,
        "heartrate_opt_out": false,
        "kilojoules": null,
        "kudos_count": 7,
        "manual": false,
        "map": "{\"id\": \"a5750615923\", \"summary_polyline\": \"unvkHzzznVG~@J`BxBjKtFn@Tb@R`CrEv@bAnBGnANzBI~JHt@?rBQvBf@nBSvFAfMMp@GzEq@~CkA`AgBT_AQuCJo@\\\\oAtA{AnDa@nBmBdG{IPW^|@fOGtImF`XyA`FYdF]zBEfIQzC[rCaClN[|GDxAg@hJ_BjN]rFE|FRjHGrFiAfIiBjOQlHUjBGbNVhCdAvCd@|CdBdDvFvSp@nAnBrAhBpBjAdF|@dApAb@p@t@~BlG`BfA|HWbAXt@fAz@nCjEdJ~AhEhAlBpCrCnF~CjMlAxBgBtBeFl@i@z@UjCD|BsCnB_AjAcA~BeH~AeC~D{BfD_AzA_Al@y@x@}CbAcCfS_UxCmEnDuGrDsJvD_IzH{QzDgHrBeFlCoIrPu]nByEpD_LfByGdB{IfBkLlAqOf@cL|@oJ|@oNJeEx@yJp@cF`GwZlKym@tEkPzB}Jj@yAjC{K|AsEdAyE|CeLVc@bAwE`@}OM}MZkCjGyUzGkV`D{Hx@qAbBcEX_B`@_Fd@iCxD}IrE{Ez@}ApAmEAkCX_C`AoDd@}@pAg@~FKrDcAjDoD`G_FdLqL|McMxP_QbCmCj@gAXgB\\\\yOOG?x@LZOpGk@dFg@lA_KtLo@`@oEbFcAn@{G|Gi@|@eAz@e@jAyBpAeDxCmD`EkJ~IeB~@iAR}IGw@^u@fAu@bCUbBAzEsAzEk@`AyEpF_EdJe@pB{@nIkCvHiBhDe@jBi@x@yGpViBbFqDzMFlCSdIDzHKvHg@vC_Nrf@uFzTqDrKiFxYcDvPmIph@eB|S}Br`@uAdPiDvTyDhN{FrOsGrM_ErIgK|WyW~k@kDzGkCxDqRbUoArCyAjFi@|@}@r@wHxBgA|@qAxB}BvHkAhA}Ap@wBzCcCOwAj@kCzFcA|Ac@VuIIaC_@_FeCmAkAm@iAcA{@wAcC{DsJu@aCgDoGs@MiGv@gBa@eA}@g@}@{@uDq@mAaCw@]c@w@aFuDwCgBkCiDgMaGkPc@}CGyILuMx@oKrBgMZiEQkTfA}N~@_Hn@{QdAqHZsDnAaIHaJh@aKnAyEfGeZN}HmA_PF]PKtIGl@}@jA}Dp@{@XuBfAqC`CsAhC@rC}AfAw@bAwBN_AIs@NwADiFAqXHaRFoEaGUKQAyBS]aHeAeBoFk@mDIsIF_EZiDPwHfBc`@lAcUBiVWiDsDsMeDwKwA[[k@AeG^yHSaCQ~Q\\\\xBGH~Bt@bI~YVdDBxOMjJa@fF@pB_@rCq@tLo@jO\", \"resource_state\": 2}",
        "max_heartrate": 164,
        "max_speed": 15.4,
        "max_watts": null,
        "moving_time": 5208,
        "name": "ðŸ§± pt. 1",
        "photo_count": 0,
        "pr_count": 37,
        "private": false,
        "raw_id": 5750615923,
        "resource_state": 2,
        "sport_type": "Ride",
        "start_date": "2021-08-06T23:51:24Z",
        "start_date_local": "2021-08-06T16:51:24Z",
        "start_latlng": "[49.271848, -123.183505]",
        "suffer_score": 36,
        "text": "resource_state: 2\nathlete: \nid: 54428340\nresource_state: 1",
        "timezone": "(GMT-08:00) America/Vancouver",
        "total_elevation_gain": 305.1,
        "total_photo_count": 0,
        "trainer": false,
        "type": "Ride",
        "upload_id": 6116251589,
        "upload_id_str": "6116251589",
        "utc_offset": -25200,
        "visibility": "everyone",
        "weighted_average_watts": null,
        "workout_type": null
      }
    ]
  }
}
```

Additional System Context:
* Fields are often stringified json objects
* Do not assume the structure or keys of the object
* When using where the path, operator and one of value fields are required
* Get is the top level query and is of type WeaviateObject
* When querying activities, assume that all entries are related to the user asking the question and there is no need to filter by athlete
* Do not return anything other than the graphql query itself as the response will be sent to the graphql endpoint
* Do NOT wrap the query in a code block (e.g ```graphql) or use any other markdown as the reponse to the question will be sent to the graphql endpoint
* Im seriously not kidding, do not wrap the query in a code block or use any other markdown the repsonse should be able to be sent directly to the graphql endpoint with no modification. DO NOT WRAP THE QUERY IN A CODE BLOCK OR USE ANY OTHER MARKDOWN
* The response must start with "query { Get {" and end with "}" i.e. All brackets should be closed
* There can only be one where clause
* When filtering on dates you must use valueDate and not valueString


Question:
Does my prefered activity change over the course of the year? i.e. do I do different activities in the winter vs the summer?

GraphQL Query: