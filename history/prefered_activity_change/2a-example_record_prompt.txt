
You are part of a LLM system.

This system works as follows
1. A user asks a question
2. We introspect the graphql schema of the vector database api
3. We use the schema from the introspection to ask an LLM to generate a graphql query that would retrieve an example record that would help an LLM better generate a graphql query that would contain the data nessesary to answer the user's question
4. We use the query returned to retrieve an example record
5. We then use the example record, the introspected schema, and the user's question to ask an LLM to generate a graphql query that would retrieve the data nessesary to answer the user's question.
6. We use the query returned to retrieve the data nessesary to answer the user's question
7. Finally we use the data returned, the user's question to generate a natural language response to the user's question.

Your role in the system is to fullfill step 3 and generate a query that will return 1 example record.

GraphQL Schema:
schema {
  query: WeaviateObj
}

"""String or String[]"""
scalar TextStringGetObjectsActivites

"""Float or Float[]"""
scalar FloatGetObjectsActivites

"""Int or Int[]"""
scalar IntGetObjectsActivites

type ActivitesAdditional {
  certainty: Float
  creationTimeUnix: String
  distance: Float
  explainScore: String

  """The UUID of a Object, assigned by its local Weaviate"""
  id: String
  lastUpdateTimeUnix: String
  score: String
  vector: [Float]
}

"""Location of the root query"""
type WeaviateObj {
  """Get Objects on a local Weaviate"""
  Get: GetObjectsObj
}

"""String or String[]"""
scalar TextDateGetObjectsActivites

type Activites {
  """Record ID, used for bookkeeping."""
  _ab_record_id: String
  _ab_stream: String
  _additional: ActivitesAdditional
  achievement_count: Float
  athlete: String
  athlete_count: Float
  average_cadence: Float
  average_heartrate: Float
  average_speed: Float
  average_temp: Float
  average_watts: Float
  comment_count: Float
  commute: Boolean
  device_watts: Boolean
  display_hide_heartrate_option: Boolean
  distance: Float
  elapsed_time: Float
  elev_high: Float
  elev_low: Float
  end_latlng: String
  external_id: String
  flagged: Boolean
  from_accepted_tag: Boolean
  gear_id: String
  has_heartrate: Boolean
  has_kudoed: Boolean
  heartrate_opt_out: Boolean
  kilojoules: Float
  kudos_count: Float
  manual: Boolean
  map: String
  max_heartrate: Float
  max_speed: Float
  max_watts: Float
  moving_time: Float
  name: String
  photo_count: Float
  pr_count: Float
  private: Boolean
  raw_id: Float
  resource_state: Float
  sport_type: String
  start_date: String
  start_date_local: String
  start_latlng: String
  suffer_score: Float
  text: String
  timezone: String
  total_elevation_gain: Float
  total_photo_count: Float
  trainer: Boolean
  type: String
  upload_id: Float
  upload_id_str: String
  utc_offset: Float
  visibility: String
  weighted_average_watts: Float
  workout_type: String
}

"""
An object containing the Operands that can be applied to a 'where' filter
"""
input GetObjectsActivitesWhereOperandsInpObj {
  """
  Specify the path from the Objects fields to the property name (e.g. ['Things', 'City', 'population'] leads to the 'population' property of a 'City' object)
  """
  path: [String]

  """Specify a String value that the target property will be compared to"""
  valueString: TextStringGetObjectsActivites

  """Specify a Text value that the target property will be compared to"""
  valueText: TextGetObjectsActivites

  """Specify a String value that the target property will be compared to"""
  valueDate: TextDateGetObjectsActivites

  """Contains the Operands that can be applied to a 'where' filter"""
  operands: [GetObjectsActivitesWhereOperandsInpObj]

  """Contains the Operators that can be applied to a 'where' filter"""
  operator: GetObjectsActivitesWhereOperatorEnum

  """Specify a Boolean value that the target property will be compared to"""
  valueBoolean: BooleanGetObjectsActivites

  """Specify a Float value that the target property will be compared to"""
  valueNumber: FloatGetObjectsActivites

  """Specify an Integer value that the target property will be compared to"""
  valueInt: IntGetObjectsActivites
}

"""Boolean or Boolean[]"""
scalar BooleanGetObjectsActivites

"""String or String[]"""
scalar TextGetObjectsActivites

"""
An object containing the Operators that can be applied to a 'where' filter
"""
enum GetObjectsActivitesWhereOperatorEnum {
  """"""
  And

  """"""
  Like

  """"""
  LessThan

  """"""
  Equal

  """"""
  Not

  """"""
  NotEqual

  """"""
  Or

  """"""
  GreaterThanEqual

  """"""
  IsNull

  """"""
  ContainsAny

  """"""
  ContainsAll

  """"""
  GreaterThan

  """"""
  LessThanEqual

  """"""
  WithinGeoRange
}

"""
An object containing filter options for a local Get query, used to convert the result to the specified filters
"""
input GetObjectsActivitesWhereInpObj {
  """Specify a Text value that the target property will be compared to"""
  valueText: TextGetObjectsActivites

  """Specify a String value that the target property will be compared to"""
  valueDate: TextDateGetObjectsActivites

  """Contains the Operands that can be applied to a 'where' filter"""
  operands: [GetObjectsActivitesWhereOperandsInpObj]

  """Specify a Boolean value that the target property will be compared to"""
  valueBoolean: BooleanGetObjectsActivites

  """Specify a String value that the target property will be compared to"""
  valueString: TextStringGetObjectsActivites

  """
  Specify the path from the Objects fields to the property name (e.g. ['Things', 'City', 'population'] leads to the 'population' property of a 'City' object)
  """
  path: [String]

  """Specify an Integer value that the target property will be compared to"""
  valueInt: IntGetObjectsActivites

  """Specify a Float value that the target property will be compared to"""
  valueNumber: FloatGetObjectsActivites

  """Contains the Operators that can be applied to a 'where' filter"""
  operator: GetObjectsActivitesWhereOperatorEnum
}

"""An object used to get %ss on a local Weaviate"""
type GetObjectsObj {
  Activites(
    """Limit the results set (usually fewer results mean faster queries)"""
    limit: Int

    """Show the results after the first x results (pagination option)"""
    offset: Int

    """
    Cut off number of results after the Nth extrema. Off by default, negative numbers mean off.
    """
    autocut: Int

    """
    Filter options for a local Get query, used to convert the result to the specified filters
    """
    where: GetObjectsActivitesWhereInpObj

    """Show the results after a given ID"""
    after: String
  ): [Activites]
}

Additional System Context:
* Get is the top level query and is of type WeaviateObject
* Use limit to limit the number of records returned to 3
* Do not return anything other than the graphql query itself as the response will be sent to the graphql endpoint
* Do NOT wrap the query in a code block (e.g ```graphql) or use any other markdown as the reponse to the question will be sent to the graphql endpoint
* Im seriously not kidding, do not wrap the query in a code block or use any other markdown the repsonse should be able to be sent directly to the graphql endpoint with no modification. DO NOT WRAP THE QUERY IN A CODE BLOCK OR USE ANY OTHER MARKDOWN
* The response should start with "query {" and end with "}" i.e. All brackets should be closed
* Prefer to use LIKE or CONTAINS over EQUALS
* DO NOT USE ANY OTHER FILTERS OTHER THAN LIMIT
* DO NOT USE WHERE
* DO NOT USE SORT
* DO NOT GET ANY FIELDS THAT BEGIN WITH "_"
* FOCUS ONLY ON GETTING ONE EXAMPLE RECORD
* At this stage getting more fields than nessesary is ok and encouraged

Question:
Does my prefered activity change over the course of the year? i.e. do I do different activities in the winter vs the summer?

GraphQL Query: